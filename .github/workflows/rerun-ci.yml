# Copyright (c) 2025, Zededa, Inc.
# SPDX-License-Identifier: Apache-2.0
---
name: Rerun CI

on:
  issue_comment:
    types: [created]

jobs:
  rerun-failed-or-cancel:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/rerun-ci')
    runs-on: ubuntu-latest

    permissions:
      actions: write
      issues: read
      pull-requests: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse CODEOWNERS to get allowed users
        run: |
          CODEOWNERS=".github/CODEOWNERS"
          awk '{for(i=1;i<=NF;i++) if($i ~ /^@/) print substr($i,2)}' "$CODEOWNERS" | sort -u > allowed_users.txt

      - name: Check if comment author is allowed
        run: |
          COMMENT_USER="${{ github.event.comment.user.login }}"
          echo "User: $COMMENT_USER"
          if ! grep -Fxq "$COMMENT_USER" allowed_users.txt; then
            echo "User $COMMENT_USER is not allowed to rerun CI." >&2
            exit 1
          fi

      - name: Check for cancel command
        id: cancel_check
        run: |
          if echo "${{ github.event.comment.body }}" | grep -q '^/rerun-ci[[:space:]]\+cancel\|^/rerun-ci$'; then
            # The ^/rerun-ci$ part ensures /rerun-ci alone doesn't trigger cancel
            :
          fi
          if echo "${{ github.event.comment.body }}" | grep -q '^/rerun-ci[[:space:]]\+cancel'; then
            echo "cancel=true" >> "$GITHUB_OUTPUT"
          else
            echo "cancel=false" >> "$GITHUB_OUTPUT"
          fi

      # Cancel all in-progress or queued workflow runs for this PR if /rerun-ci cancel is given
      - name: Cancel in-progress runs for this PR
        if: steps.cancel_check.outputs.cancel == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"
          BRANCH=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json headRefName -q .headRefName)
          gh run list --repo "$REPO" --branch "$BRANCH" --event pull_request_target --json databaseId,status \
            | jq -r '.[] | select(.status=="in_progress" or .status=="queued") | .databaseId' > running_ids.txt
          if [ -s running_ids.txt ]; then
            while read -r run_id; do
              [ -z "$run_id" ] && continue
              echo "Canceling workflow run $run_id"
              gh run cancel "$run_id" --repo "$REPO"
            done < running_ids.txt
          else
            echo "No in-progress runs found to cancel."
          fi

      # Wait a bit to allow cancellation to process
      - name: Wait for cancellations to process
        if: steps.cancel_check.outputs.cancel == 'true'
        run: sleep 30

      # Re-run all cancelled runs
      - name: Re-run cancelled runs
        if: steps.cancel_check.outputs.cancel == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"
          BRANCH=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json headRefName -q .headRefName)
          gh run list --repo "$REPO" --branch "$BRANCH" --event pull_request_target --json databaseId,conclusion \
            | jq -r '.[] | select(.conclusion=="cancelled") | .databaseId' > cancelled_ids.txt
          if [ -s cancelled_ids.txt ]; then
            while read -r run_id; do
              [ -z "$run_id" ] && continue
              echo "Re-running cancelled workflow run $run_id"
              gh run rerun "$run_id" --repo "$REPO"
            done < cancelled_ids.txt
          else
            echo "No cancelled runs found to rerun."
          fi

      # Find failed workflow runs for this PR (only if not cancel command)
      - name: Find failed workflow runs for this PR
        id: get_runs
        if: steps.cancel_check.outputs.cancel == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          REPO="${{ github.repository }}"
          BRANCH=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json headRefName -q .headRefName)
          gh run list --repo "$REPO" --branch "$BRANCH" --event pull_request_target --json databaseId,status,conclusion \
            | jq -r '.[] | select(.status=="completed" and .conclusion!="success") | .databaseId' > run_ids.txt
          if [ -s run_ids.txt ]; then
            echo "has_runs=true" >> "$GITHUB_OUTPUT"
          else
            echo "No failed workflow runs found for this PR"
            echo "has_runs=false" >> "$GITHUB_OUTPUT"
          fi

      # Re-run failed workflow runs (only if not cancel command)
      - name: Re-run failed workflow runs
        if: steps.cancel_check.outputs.cancel == 'false' && steps.get_runs.outputs.has_runs == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          while read -r run_id; do
            [ -z "$run_id" ] && continue
            echo "Re-running workflow run $run_id"
            gh run rerun "$run_id" --repo "$REPO" --failed
          done < run_ids.txt
