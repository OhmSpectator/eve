# Copyright (c) 2024, Zededa, Inc.
# SPDX-License-Identifier: Apache-2.0
---
name: Check Docker Hashes Consistency
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - "master"
      - "[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+-stable"
    paths-ignore:
      - '**/*.md'
      - '.github/**'
  pull_request:
    branches:
      - "master"
      - "[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+-stable"
    paths-ignore:
      - '**/*.md'
      - '.github/**'

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ github.workspace }}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build get-deps helper
        shell: bash
        run: |
          echo "::group::[Build] tools/get-deps (go mod download + build)"
          make -C ./tools/get-deps GOOS=linux
          echo "::endgroup::"

      - name: Build dockerfile-from-checker helper
        shell: bash
        run: |
          echo "::group::[Build] tools/dockerfile-from-checker"
          make -C ./tools/dockerfile-from-checker
          echo "::endgroup::"

      - name: Verify Dockerfile hash consistency
        shell: bash
        run: |
          echo "::group::[Check] pkg: compare Dockerfile hashes"
          set -eo pipefail
          log_file=$(mktemp)

          # run once, capture output and exit status
          if ! make check-docker-hashes-consistency 2>&1 | tee "$log_file"; then
            rc=$?
          else
            rc=0
          fi
          echo "::endgroup::"

          # If the checker failed, surface every error line as a PR annotation
          if [ "$rc" -ne 0 ]; then
            while IFS= read -r line; do
              # Pattern 1:  <file> uses <image:tag> but <hash> is built in this repo
              if [[ "$line" =~ ^([^[:space:]]+)\ uses\ .*is\ built\ in\ this\ repo$ ]]; then
                file="${BASH_REMATCH[1]}"
                echo "::error file=${file}::${line}"
                continue
              fi

              # Pattern 2:  tags differ for image ... in files <file1> and <file2>
              if [[ "$line" =~ ^tags\ differ\ for\ image\ .*\ in\ files\ ([^[:space:]]+)\ and\ ([^[:space:]]+)$ ]]; then
                file1="${BASH_REMATCH[1]}"
                file2="${BASH_REMATCH[2]}"
                echo "::error file=${file1}::${line}"
                echo "::error file=${file2}::${line}"
                continue
              fi

              # Fallback: generic error not tied to a specific file
              echo "::error ::${line}"
            done < "$log_file"
            exit 1
          fi

          # propagate any non-hash-related failure from make
          exit $rc
